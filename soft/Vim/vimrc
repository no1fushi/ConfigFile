"Ëµ∑ÂãïÊôÇ„É°„ÉÉ„Çª„Éº„Ç∏ÈùûË°®Á§∫
set shortmess+=I

"„Éò„É´„ÉóÁîªÈù¢ÊúÄÂ§ß
set helpheight=999

" ÊñáÂ≠ó„Ç≥„Éº„ÉâËá™ÂãïË™çË≠ò
if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconv„ÅåeucJP-msÂØæÂøú„ÉÅ„Çß„ÉÉ„ÇØ
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  " iconv„ÅåJISX0213ÂØæÂøú„ÉÅ„Çß„ÉÉ„ÇØ
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  " fileencodingsÊßãÁØâ
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " ÂÆöÊï∞Âá¶ÂàÜ
  unlet s:enc_euc
  unlet s:enc_jis
endif
" Êó•Êú¨Ë™ûÂê´„Åæ„Å™„ÅÑ fileencoding „Å´ encoding „Çí‰Ωø„ÅÜ
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" ÊîπË°å„Ç≥„Éº„ÉâËá™ÂãïË™çË≠ò
set fileformats=unix,dos,mac
" ‚ñ°„Å®‚óØ‚óØ„Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„Åö„Çå„Å™„ÅÑ„ÅÑ
if exists('&ambiwidth')
  set ambiwidth=double
endif

"vi„Å®„ÅÆ‰∫íÊèõÊÄß„Çí„Å®„Çâ„Å™„ÅÑ
set nocompatible

"ÊîπË°å„Ç≥„Éº„ÉâËá™ÂãïË™çË≠ò
set fileformats=unix,dos,mac

"„Ç´„É©„Éº„Çπ„Ç≠„Éº„É†
colorscheme RailsCasts

"„Ç∑„É≥„Çø„ÉÉ„ÇØ„Çπ„Éè„Ç§„É©„Ç§„ÉàÊúâÂäπ
 syntax on

"Ë°åÁï™Âè∑„ÇíË°®Á§∫
set number

"Á∑®ÈõÜË°åÁï™Âè∑„Éè„Ç§„É©„Ç§„Éà
hi CursorLineNr term=bold cterm=NONE ctermfg=228 ctermbg=NONE

"„Çø„Ç§„Éà„É´„Ç¶„Ç§„É≥„Éâ„Ç¶Êû†
set title

"„É´„Éº„É©„ÉºË°®Á§∫
set ruler

"Á∑®ÈõÜÊ•≠Ê®™Á∑öË°®Á§∫
set cursorline

"Á∑®ÈõÜÊ•≠Á∏¶Á∑ö„Éè„Ç§„É©„Ç§„Éà
"set cursorcolumn
"hi CursorColumn term=reverse  ctermbg=5

"„Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆË®òÊÜ∂
if has("autocmd")
  augroup redhat
    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
  augroup END
endif

"ÂØæÂøúÊã¨ÂºßÂº∑Ë™ø
set showmatch

"Ê§úÁ¥¢ÊñáÂ≠óÂàó„Éè„Ç§„É©„Ç§„ÉàÊúâÂäπ
set hlsearch

"„Ç§„É≥„ÇØ„É™„É°„É≥„Çø„É´„Çµ„Éº„ÉÅÊúâÂäπ
set incsearch

"Ê§úÁ¥¢ÊúÄÁµÇÂÄôË£úÊôÇÂÖàÈ†≠„Å∏
set wrapscan

"„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥Ë£úÂÆåÊã°Âºµ
set wildmenu wildmode=list:longest,full

"„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥Â±•Ê≠¥‰øùÂ≠ò
set history=50

"ÂÖ•Âäõ„ÉÜ„Ç≠„Çπ„ÉàÊúÄÂ§ßÂπÖ
set textwidth=0

"„Ç¶„Ç§„É≥„Éâ„Ç¶ÂπÖÊäò„ÇäËøî„Åó
set wrap

"„Éê„ÉÉ„ÇØ„Çπ„Éö„Éº„ÇπÊúâÂäπÁØÑÂõ≤
set backspace=indent,eol,start

"ÂÖ®Ëßí„Çπ„Éö„Éº„ÇπË°®Á§∫
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /„ÄÄ/

"„Ç™„Éº„Éà„Ç§„É≥„Éá„É≥„ÉàÊúâÂäπ
set autoindent

"„Çπ„Éû„Éº„Éà„Ç§„É≥„Éá„É≥„ÉàÊúâÂäπ
set smartindent

"„Çø„ÉñÂØæÂøúÁ©∫ÁôΩÊï∞
set tabstop=4

"„Ç§„É≥„Éá„É≥„ÉàÂêÑÈöéÊÆµÁ©∫ÁôΩÊï∞
set shiftwidth=4

"„Çø„ÉñÊôÇÁ©∫ÁôΩ„Å™„Åó
set noexpandtab

"‰∏ä‰∏ãË¶ñÁïåÁ¢∫‰øù
set scrolloff=8

"‰øùÂ≠òÁ¢∫Ë™ç
set confirm

"‰øùÂ≠òÂâçÂà•„Éï„Ç°„Ç§„É´Èñã„Åè
set hidden

" Â§ñÈÉ®Â§âÊõ¥Ë™≠„ÅøÁõ¥„Åó
set autoread

"„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Å™„Åó
set nobackup

"„Çπ„ÉØ„ÉÉ„Éó„Å™„Åó
set noswapfile

"windows„Éë„Çπ
set shellslash

"„Éì„Éº„ÉóÈü≥ÁÑ°Âäπ
set visualbell t_vb=


"„Éá„Éï„Ç©„É´„Éà
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers

" Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup redhat
  autocmd!
  " In text files, always limit the width of text to 78 characters
  " autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/run/media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add $PWD/cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

filetype plugin on

if &term=="xterm"
     set t_Co=8
     set t_Sb=[4%dm
     set t_Sf=[3%dm
endif

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

"„Éó„É©„Ç∞„Ç§„É≥


"NeoBundle


"bundleÁÆ°ÁêÜ„Éá„Ç£„É¨„ÇØ„Éà„É™

" neobundle settings {{{
if has('vim_starting')
  set nocompatible
  " neobundle „Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØËá™Âãï„Ç§„É≥„Çπ„Éà„Éº„É´
  if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
    echo "install neobundle..."
    " vim „Åã„Çâ„Ç≥„Éû„É≥„ÉâÂëº„Å≥Âá∫„Åó„Å¶„ÅÑ„Çã„Å†„Åë neobundle.vim „ÅÆ„ÇØ„É≠„Éº„É≥
    :call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
  endif
  " runtimepath „ÅÆËøΩÂä†„ÅØÂøÖÈ†à
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle'))
let g:neobundle_default_git_protocol='https'

"neobundle„ÇíneobundleÁÆ°ÁêÜ
NeoBundleFetch 'shougo/neobundle.vim'

"„Éó„É©„Ç∞„Ç§„É≥ÁÆ°ÁêÜ

"railscasts
NeoBundle 'jpo/vim-railscasts-theme'
"molokai
NeoBundle 'tomasr/molokai'
"NERDTree
NeoBundle 'scrooloose/nerdtree'
"autoclose
NeoBundle 'Townk/vim-autoclose'
"Emmet
NeoBundle 'mattn/emmet-vim'
"syntastic
NeoBundle 'scrooloose/syntastic'
"endwise
NeoBundle 'tpope/vim-endwise'
"rsense
NeoBundle 'marcus/rsense'
"vim-tags
NeoBundle 'szw/vim-tags'
"AutoComplPop
NeoBundle 'vim-scripts/AutoComplPop'
"html5
NeoBundle 'othree/html5.vim'
"css3-syntax
NeoBundle 'hail2u/vim-css3-syntax'
"csscolor
NeoBundle 'skammer/vim-css-color'
"markdown
NeoBundle 'plasticboy/vim-markdown'
"previm
NeoBundle 'kannokanno/previm'
"open-browser
NeoBundle 'tyru/open-browser.vim'
"neosnipet
if has('lua') && (( v:version == 703 && has('patch885')) || (v:version>= 704))
  NeoBundle 'shougo/neocomplete'
else
  NeoBundle 'shougo/neocomplcache'
fi
NeoBundle "shougo/neosnippet"
NeoBundle "shougo/neosnippet-snippets"
NeoBundle "honza/vim-snippets"
NeoBundle 'sudo.vim'
endif

"Êú™„Ç§„É≥„Çπ„Éà„Éº„É´„ÉÅ„Çß„ÉÉ„ÇØ
NeoBundleCheck

call neobundle#end()
filetype plugin indent on



"Neosnippet
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

"neocompleta
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'

"Emmet
let g:user_emmet_leader_key='<c-e>'
let g:user_emmet_settings = {
    \    'variables': {
    \      'lang': "ja"
    \    },
    \   'indentation': '  '
    \ }

"synrastic
let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1
let g:syntastic_echo_current_error = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_enable_highlighting = 1
let g:syntastic_php_php_args = '-l'
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_javascript_checker = 'jshint'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"AutoComplePop
autocmd FileType php,ctp :set dictionary=~/.vim/dict/php.dict
highlight Pmenu ctermbg=4
highlight PmenuSel ctermbg=1
highlight PMenuSbar ctermbg=4

" Rsense
let g:rsenseHome = '/usr/local/lib/rsense-0.3'
let g:rsenseUseOmniFunc = 1

"markdown
autocmd BufRead,BufNewFile *.mkd  set filetype=markdown
autocmd BufRead,BufNewFile *.md  set filetype=markdown
